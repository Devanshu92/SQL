/*
Write an SQL query that reports the best seller by total sales price, If there is a tie, report them all.

The query result format is in the following example:

Product table:
+------------+--------------+------------+
| product_id | product_name | unit_price |
+------------+--------------+------------+
| 1 | S8 | 1000 |
| 2 | G4 | 800 |
| 3 | iPhone | 1400 |
+------------+--------------+------------+

Sales table:
+-----------+------------+----------+------------+----------+-------+
| seller_id | product_id | buyer_id | sale_date | quantity | price |
+-----------+------------+----------+------------+----------+-------+
| 1 | 1 | 1 | 2019-01-21 | 2 | 2000 |
| 1 | 2 | 2 | 2019-02-17 | 1 | 800 |
| 2 | 2 | 3 | 2019-06-02 | 1 | 800 |
| 3 | 3 | 4 | 2019-05-13 | 2 | 2800 |
+-----------+------------+----------+------------+----------+-------+

Result table:
+-------------+
| seller_id |
+-------------+
| 1 |
| 3 |
+-------------+
*/

Solution : 

DROP TABLE IF EXISTS PRODUCT;
CREATE TABLE PRODUCT
(
PRODUCT_ID INTEGER,
PRODUCT_NAME VARCHAR,
UNIT_PRICE INTEGER
);

INSERT INTO PRODUCT VALUES
(1,'S8',1000),
(2,'G4',800),
(3,'IPHONE',1400);

DROP TABLE IF EXISTS SALES;
CREATE TABLE SALES
(
SELLER_ID INTEGER,
PRODUCT_ID INTEGER,
BUYER_ID INTEGER,
SALE_DATE DATE,
QUANTITY INTEGER,
PRICE INTEGER
);

INSERT INTO SALES VALUES
(1,1,1,'2019-01-21',2,2000),
(1,2,2,'2019-02-17',1,800),
(2,2,3,'2019-06-02',1,800),
(3,3,4,'2019-05-13',2,2800);

SELECT * FROM SALES 
SELECT * FROM PRODUCT 

SELECT
SELLER_ID
FROM
(
SELECT 
SALES.SELLER_ID,
SUM(PRODUCT.UNIT_PRICE * SALES.QUANTITY) AS TOTAL_SALES_PRICE,
RANK() OVER(ORDER BY TOTAL_SALES_PRICE DESC) AS RNK
FROM SALES 
INNER JOIN PRODUCT 
ON SALES.PRODUCT_ID = PRODUCT.PRODUCT_ID
GROUP BY 1
)
WHERE
RNK = 1 