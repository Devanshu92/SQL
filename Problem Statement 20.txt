/* Write a SQL to provide year wise sales of products */ 

Input Table - Sales 

Product_ID	Period_Start	Period_End	Average_Daily_Sales
1	1/25/2019	2/28/2019	100
2	12/1/2018	1/1/2020	10
3	12/1/2019	1/31/2020	1


Output 

Product_ID	Year	Total_Sales
1	2019	3500
2	2018	310
3	2020	31
2	2020	10
2	2019	3650
3	2019	31

/* 

-- Recursive CTE Concept below ---

WITH RECURSIVE CTE_NUMBERS(NUM) AS
(
SELECT 1 AS NUM -- ANCHOR QUERY
UNION ALL
SELECT  NUM+1 -- RECURSIVE QUERY
FROM CTE_NUMBERS
WHERE NUM < 6 -- FILTER TO STOP  THE RECURSION
)

SELECT NUM FROM CTE_NUMBERS ;

*/

DROP TABLE IF EXISTS SALES ;
CREATE TABLE SALES (
PRODUCT_ID INT,
PERIOD_START DATE,
PERIOD_END DATE,
AVERAGE_DAILY_SALES INT
);

INSERT INTO SALES
VALUES
(1,'2019-01-25','2019-02-28',100),
(2,'2018-12-01','2020-01-01',10),
(3,'2019-12-01','2020-01-31',1);

---- SOLUTION 1 -------
WITH RECURSIVE CTE(MIN_DATE,MAX_DATE) AS
(
SELECT CAST(MIN(PERIOD_START) AS DATE) AS MIN_DATE, CAST(MAX(PERIOD_END) AS DATE) AS MAX_DATE FROM SALES
UNION ALL
SELECT CAST(DATEADD(DAY,1,MIN_DATE) AS DATE) AS MIN_DATE, CAST(MAX_DATE AS DATE) FROM CTE
WHERE MIN_DATE < MAX_DATE
)

SELECT S.PRODUCT_ID,DATEPART(YEAR,C.MIN_DATE) AS YEAR,
       SUM(AVERAGE_DAILY_SALES) AS TOTAL_SALES
FROM CTE C
INNER JOIN SALES S
ON C.MIN_DATE BETWEEN S.PERIOD_START AND S.PERIOD_END
GROUP BY S.PRODUCT_ID, DATEPART(YEAR,C.MIN_DATE)